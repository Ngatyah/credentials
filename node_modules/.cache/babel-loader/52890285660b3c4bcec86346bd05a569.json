{"ast":null,"code":"var _jsxFileName = \"/home/ngatyah/JAVASCRIPT/cridentials/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\nimport Input from '../UI/Input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const authCxt = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  useEffect(() => {\n    console.log(\"Mic test\");\n    setFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6);\n  }, [setFormIsValid, enteredEmail, enteredPassword]);\n\n  const emailChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value);\n    setFormIsValid(event.target.value.trim().length > 6 && enteredEmail.includes('@'));\n  };\n\n  const validateEmailHandler = () => {\n    setEmailIsValid(enteredEmail.includes('@'));\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (formIsValid) {\n      authCxt.onLogin(enteredEmail, enteredPassword);\n    } else if (!emailIsValid) {} else {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: emailInputRef,\n        id: \"email\",\n        label: \"Email\",\n        type: \"text\",\n        isValid: emailIsValid,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        ref: passwordInputRef,\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passwordIsValid,\n        value: enteredPassword,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"rA3rPBi+Q2ktQ2AiwCUWFl994nQ=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/ngatyah/JAVASCRIPT/cridentials/src/components/Login/Login.js"],"names":["React","useState","useEffect","useContext","useRef","Card","classes","Button","AuthContext","Input","Login","props","enteredEmail","setEnteredEmail","emailIsValid","setEmailIsValid","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","authCxt","emailInputRef","passwordInputRef","console","log","includes","trim","length","emailChangeHandler","event","target","value","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\nimport Input from '../UI/Input/Input';\n\nconst Login = (props) => {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const authCxt = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  useEffect(() => {\n    console.log(\"Mic test\")\n    setFormIsValid(\n      enteredEmail.includes('@') && enteredPassword.trim().length > 6\n    );\n  }, [setFormIsValid, enteredEmail, enteredPassword])\n\n  const emailChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n\n\n\n  };\n\n  const passwordChangeHandler = (event) => {\n    setEnteredPassword(event.target.value);\n\n    setFormIsValid(\n      event.target.value.trim().length > 6 && enteredEmail.includes('@')\n    );\n  };\n\n  const validateEmailHandler = () => {\n    setEmailIsValid(enteredEmail.includes('@'));\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if (formIsValid) {\n      authCxt.onLogin(enteredEmail, enteredPassword);\n    }\n    else if (!emailIsValid) {\n    } else {\n\n    }\n\n\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        {/* Refactoring login inputs */}\n        <Input\n          ref={emailInputRef}\n          id='email'\n          label='Email'\n          type='text'\n          isValid={emailIsValid}\n          onChange={emailChangeHandler}\n          onBlur={validateEmailHandler}\n          value={enteredEmail}\n        />\n        <Input\n          ref={passwordInputRef}\n          id='password'\n          label='Password'\n          type='password'\n          isValid={passwordIsValid}\n          value={enteredPassword}\n          onChange={passwordChangeHandler}\n          onBlur={validatePasswordHandler}\n\n        />\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}